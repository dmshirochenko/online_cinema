version: '3.9'

services:
  postgres:
    image: postgres:13
    container_name: ${POSTGRES_HOST}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    expose:
      - "${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./postgres_db/db_init.sql:/docker-entrypoint-initdb.d/db_init.sql
      - ./docker_volumes/postgres_instance/data:/var/lib/postgresql/data
    networks:
      - cinema


  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.2
    container_name: elastic-content
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cinema

  cache:
    image: redis:6.2-alpine
    container_name: redis-content
    volumes:
      - cache:/data
    networks:
      - cinema
  

  etl_service:
      build: ./content-service/etl
      container_name: etl-content
      restart: always
      env_file:
        - .env
      volumes:
          - ./content-service/etl:/opt/app
      depends_on:
        postgres:
          condition: service_healthy
        elastic:
          condition: service_healthy
      networks:
        - cinema

  fastapi:
    build: ./content-service/content_api
    container_name: service-content
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent ${FASTAPI_HOST}:${FASTAPI_PORT} -H 'X-Request-Id: healthcheck' >/dev/null || exit 1" ]
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      elastic:
        condition: service_healthy
      cache:
        condition: service_started
    expose:
      - "80"
    networks:
      - cinema


  django:
    container_name: django
    build: ./movie_app
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent ${DJANGO_HOST}:${DJANGO_PORT} >/dev/null || exit 1" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - "8000"
    volumes:
      - ./movie_app/static:/opt/app/static:rw
    networks:
      - cinema

  postgres_auth:
    image: postgres:13
    container_name: ${POSTGRES_AUTH_HOST}
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_AUTH_USER}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD}
      POSTGRES_DB: ${POSTGRES_AUTH_DB}
    volumes:
      - ./docker_volumes/postgres_auth_instance/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cinema

  cache_auth:
    image: redis:6.2-alpine
    restart: always
    container_name: cache_auth
    networks:
      - cinema

  auth:
    build: ./auth/auth
    image: auth-image
    restart: always
    entrypoint: sh -c "./start.sh"
    env_file:
      - .env
    ports:
      - "5001:5000"
    depends_on:
      - postgres_auth
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cinema

  mongo:
    image: mongo:4.4
    restart: always
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cinema

  ugc_api:
    build: ./ugc-service/api_ugc
    image: ugc_image:latest
    container_name: ugc_api
    restart: always
    entrypoint: >
      sh -c "./start.sh"
    env_file:
      - .env
    ports:
      - "8003:8000"
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ugc/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cinema

  nginx:
    container_name: nginx
    image: nginx:1.23.2
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/config:/etc/nginx/conf.d:ro
      - ./movie_app/static:/data/static:ro
    depends_on:
      django:
        condition: service_healthy
      fastapi:
        condition: service_healthy
      auth:
        condition: service_healthy
      ugc_api:
        condition: service_healthy
    ports:
      - "80:80"
    networks:
      - cinema

#data generation
  data_generator:
    build: ./rec-sys-service/data_generator
    env_file:
      - .env
    depends_on:
      django:
        condition: service_healthy
      fastapi:
        condition: service_healthy
      auth:
        condition: service_healthy
      ugc_api:
        condition: service_healthy
      nginx:
        condition: service_started
    networks:
      - cinema

#general recomendations
  db_ml:
      image: redis:6.2-alpine
      restart: always
      command: -- port 6380
      networks:
        - cinema

  general_recs:
    build: ./rec-sys-service/general_recs
    # TODO: Here `depends_on` is not enough, we need to wait
    # util data_generator does its job to fill test data.
    volumes:
      - ./rec-sys-service/general_recs:/opt/app/code
    depends_on:
      db_ml:
        condition: service_started
      nginx:
        condition: service_started
    networks:
      - cinema

#similar movies reco
  db_recs_similar:
    image: redis:6.2-alpine
    restart: always
    container_name: db_recs_similar
    command: -- port 6381
    networks:
      - cinema

  db_embeddings:
    image: redis:6.2-alpine
    restart: always
    container_name: db_embeddings
    command: -- port 6382
    networks:
      - cinema

  similar_recs:
    build: ./rec-sys-service/similar_recs
    container_name: worker-gen-rec
    depends_on:
      db_embeddings:
        condition: service_started
      db_recs_similar:
        condition: service_started
      nginx:
        condition: service_started
    networks:
      - cinema


#api for recomendations
  cache_reco_api:
    image: redis:6.2-alpine
    restart: always
    container_name: redis-view_count
    volumes:
      - ./docker_volumes/cache_reco_api:/data
    networks:
      - cinema
    ports:
      - "16379:6379"

  recsys_service:
    build: ./rec-sys-service/api
    container_name: service-rec-sys
    restart: always
    ports:
      - "8004:8000"
    depends_on:
      general_recs:
        condition: service_started
      nginx:
        condition: service_started
      cache_reco_api:
        condition: service_started
    networks:
      - cinema

volumes:
  cache:
    driver: local
  cache_reco_api:
    driver: local

networks:
  cinema:
    external: true
